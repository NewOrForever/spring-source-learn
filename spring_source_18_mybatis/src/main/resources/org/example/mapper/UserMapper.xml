<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.mapper.UserMapper">

<!--    <cache-ref namespace=""/>-->

    <cache></cache>
    <!-- Mybatis 是如何将 sql 执行结果封装为目标对象并返回的？都有哪些映射形式？-->
    <resultMap id="userResult" type="org.example.entity.User">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="sex" jdbcType="TINYINT" property="sex"/>
        <result column="deleted" jdbcType="TINYINT" property="deleted"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="create_time"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="update_time"/>
        <!--<collection property="" select=""-->
    </resultMap>


    <sql id="userAllFields">
        id,username,`password`,sex,deleted,update_time,create_time
    </sql>

<!--${}测试-->
    <select id="selectById" databaseId="mysql" resultMap="userResult" >
        select
        <include refid="userAllFields" />
        from users
        <where>
            <if test="id > 0">
                and id=#{id}
            </if>
        </where>
    </select>

    <!--trim、where、set、foreach、if、choose、when、otherwise、bind-->
    <select id="selectSqlNode" resultMap="userResult">
        select <include refid="userAllFields" />
        from users
        <trim prefix="where" prefixOverrides="and">
            <if test="id > 0">
                and id = #{id}
            </if>
            <if test="username != null">
                and username = #{username}
            </if>

            <choose>
                <when test="sex == 1">
                    and sex = #{sex}
                </when>
                <when test="deleted == 0">
                    and deleted = #{deleted}
                </when>
                <otherwise>
                    and password = #{password}
                </otherwise>
            </choose>
        </trim>

    </select>

    <update id="updateUserForeach" parameterType="map">
        update users
        <set>
            <!--User对象封装进了Map，如果直接就是User的话前缀就不要了，这好像都是ognl表达式啊-->
            username = #{user.username},
            password = #{user.password}
        </set>
        <where>
            id in
            <foreach collection="ids" open="(" close=")" separator="," item="ids">
                #{ids}
            </foreach>
        </where>

    </update>




    <!--
        choose - when - otherwise  ==> 相当于java中的switch - case - default
        trim时where和set的父类，可以替代他们使用
        foreach
         collection：用于迭代数组时array，集合时list，如果将元素封装进了Map，那么该值就是Map的key值
            - 其实当传进来的参数类型时数组或时集合时，Mybatis自动会封装到Map，只不过默认了key值是array和list
         open表示开始符号
         close表示结束符合
         separator表示元素间的分隔符
         item表示迭代的数组，属性值可以任意，但提倡与方法的数组名相同
         #{ids}表示数组中的每个元素值

    -->




    <!--
      动态sql数据源  需要在调用crud 解析sql
      静态sql数据源        解析CURD节点的就会把sql解析好

      1  select id,user_name,create_time from t_user where id=1   动态

      2  select id,user_name,create_time from t_user where id= ?   静态

      3  select id,user_name,create_time from t_user
      <where>
         <if test="id>0">
         and id=${id}
         </if>
      </where>
      动态
    -->
</mapper>
