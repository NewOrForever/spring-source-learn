###### 分片策略的测试

# 配置真实数据源
spring.shardingsphere.datasource.names=m1,m2

# 配置第 1 个数据源
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://192.168.65.227:3306/courseDB?serverTimezone=UTC
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=root
# 配置第 2个数据源
spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m2.url=jdbc:mysql://192.168.65.227:3306/courseDB2?serverTimezone=UTC
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=root

# 指定表的分布情况 配置表在哪个数据库里，表名是什么。水平分表，分两个表：m1.course_1,m1.course_2
spring.shardingsphere.sharding.tables.course.actual-data-nodes=m$->{1..2}.course_$->{1..2}

# 指定表的主键生成策略
spring.shardingsphere.sharding.tables.course.key-generator.column=cid
spring.shardingsphere.sharding.tables.course.key-generator.type=SNOWFLAKE
# 雪花算法的一个可选参数
spring.shardingsphere.sharding.tables.course.key-generator.props.worker.id=1

# 使用自定义的主键生成策略

# 指定分片策略
# inline
# 分片键
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.sharding-column=cid
#spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=cid
# 分片算法
# spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{cid%2+1}
# 上面这种策略只能将数据分配到两张表中。下面这种方式才能分配到四张表
#spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=m$->{cid%2+1}
# 这是我自己写的
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{(cid%5+1)%2+1}
# 这是楼兰写的 - 测试一下
#spring.shardingsphere.sharding.tables.course.table-strategy.inline.algorithm-expression=course_$->{((cid+1)%4).intdiv(2)}
# 这里要注意下，groovy直接用/除法，计算出来的是浮点数，要计算出整数需要使用.intdiv方法

# standard 标准分片策略
#spring.shardingsphere.sharding.tables.course.table-strategy.standard.sharding-column=cid
#spring.shardingsphere.sharding.tables.course.table-strategy.standard.precise-algorithm-class-name=com.example.algorithm.MyPreciseTableShardingAlgorithm
#spring.shardingsphere.sharding.tables.course.table-strategy.standard.range-algorithm-class-name=com.example.algorithm.MyRangeTableShardingAlgorithm

#spring.shardingsphere.sharding.tables.course.database-strategy.standard.sharding-column=cid
#spring.shardingsphere.sharding.tables.course.database-strategy.standard.precise-algorithm-class-name=com.example.algorithm.MyPreciseDSShardingAlgorithm
#spring.shardingsphere.sharding.tables.course.database-strategy.standard.range-algorithm-class-name=com.example.algorithm.MyRangeDSShardingAlgorithm

# complex复杂分片策略
# 分表
#spring.shardingsphere.sharding.tables.course.table-strategy.complex.sharding-columns=cid,user_id
#spring.shardingsphere.sharding.tables.course.table-strategy.complex.algorithm-class-name=com.example.algorithm.MyComplexTableShardingAlgorithm
# 分库
#spring.shardingsphere.sharding.tables.course.database-strategy.complex.sharding-columns=cid,user_id
#spring.shardingsphere.sharding.tables.course.database-strategy.complex.algorithm-class-name=com.example.algorithm.MyComplexDsShardingAlgorithm
# hint强制路由策略
spring.shardingsphere.sharding.tables.course.table-strategy.hint.algorithm-class-name=com.example.algorithm.MyHintTableShardingAlgorithm
spring.shardingsphere.sharding.tables.course.database-strategy.hint.algorithm-class-name=com.example.algorithm.MyHintDSShardingAlgorithm

# 广播表配置
# 增删改：m1、m2数据源都会去执行
# 查：应该是随机找一个数据源去执行
spring.shardingsphere.sharding.broadcast-tables=t_dict
spring.shardingsphere.sharding.tables.t_dict.key-generator.column=dict_id
spring.shardingsphere.sharding.tables.t_dict.key-generator.type=SNOWFLAKE


# 打开sql日志输出
spring.shardingsphere.props.sql.show=true
